11 Aug 2022 (ALL BACKLOGS COMPLETE)
    - Handle Actors and Targets (DONE)
        - Add a new property in StoryNode that specifies target, and allow the target to be any type of object node. (Done)
        - Add a new property in JointNode that specifies target or actor.
            - This will have to be done both for Normal Rules and Joint Rules
              - For Normal Rules, there is a List of Targets
              - For Joint Rules, there is a List of Targets
    - Handle only one character splitting (DONE)
    - Solution is to instead of splitting into individuals, we split into groups instead (DONE)
        - For example, a node containing Alice, Bob, Charlie, and Dave fits the criteria for a split
        - The next node should allow them to split into two groups, Alice Bob and Chalie into left node with no target, dave becomes the main actor of right node
    - test the Joint Node Graph codes to make sure that they work (DONE)
    - Look at REGEN Code (Done)
    - Init Rules:
        - Assassinate
        - Break Ally
        - Fight
        - Forge Ally
        - Give Blackmail Letter
        - Give Gift
        - Murder
        - Murder Blackmailer
        - Rebel
        - Spy
        - Steal
    - Replacement Rules:
        - Ambush
        - Ambush by Hater
        - Caught
        - Encounter
        - More Fight
        - Spare
        - Stealth Kill
        - Stolen Gift
18 Aug 2022 (ALL BACKLOGS COMPLETE)
    - Flexible rules that allows nodes with any number of actors, allowing them to be used in multiple instances (DONE, UNTESTED)
        - For example:
            - If there is more than 1 person doing X, then they are eligible to do Y together with no targets in the next node
    - Get rid of Dummies OR change equality testing (DONE, Dummies gotten rid of in Joint!)
    - How do I even handle targets from the perspective of the Rewrite Rules???? (DONE, TESTED)
        - Since a large portion will be replaced, do I need to list out the targets in all of those instances?
        - What do I need to do with the targets of these ones?
        - (TODO: PAPER PLOTTING REQUIRED)
25 Aug 2022 (ALL BACKLOGS COMPLETE)
    - Handle Targets for Joint Rule (DONE)
    - Test Multi-Group Splitting Rule (DONE)
    - Check Proposal to Compare (DONE)
        - Quality Metrics needs to be done
        - I think that almost everything in regards of the graph has been done except:
            - The untested and the unadded
            - The program that ties up all the components together
                - This includes a function that automates relationship change with targets
            - Graph Visualization
        - Generic Constraints
    - Read and Summarize new Kybartas Paper (DONE)
        - Uses the same story metrics as REGEN
08 Sep 2022
    - Map Representation in World State (DONE)
        - Function in World State, that given a LocationNode, returns all adjacent locations
    - StoryGenerationFunction's rule application will make a Location List this way:
        - Assume the location doesn't change
        - However, if there is an action node that calls for a location change, refer to the map and choose one random location to change to
        - After that, all the actions will be performed in that location unless there is another change
    - Location Adjecnecy Function in World State (DONE)
15 Sep 2022
    - Change the future World States according to Present
    - Memory issues from copying WorldStates, how much is too much
    - Record only changes to WorldState, keep latest version
        - Pending: Rewind back in case of errors
        - Keep 2 world states: Initial Worldstate and Current Worldstate
            - In the case that there is a change to the worldstate, take the initial worldstate and apply all the changes in each step, then make that the new current worldstate
    - Function that takes Tag and Value as input, and then outputs the proper relationship change (where actor/target can be added later)
    - ApplyRule, but with past timesteps
    - Check if Character is in the same location
        - Take the init step, advance it until it hits the place we want to check, 